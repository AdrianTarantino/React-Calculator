{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Adrian\\\\Documents\\\\Coding\\\\react_calculator\\\\src\\\\index.js\";\nimport React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\n\n// import { create, all } from 'mathjs'\n\n// class Block extends React.Component {\n//   constructor(props) {\n//     super(props);\n\n//     this.state = {\n//       value: this.props.value,\n//     };\n//   }\n\n//   render() {\n//     return (\n//       <button className=\"button\" \n//               onClick={() => {this.props.onClick()}}>\n//         <p className='text'>{this.state.value}</p>\n//       </button>\n//     )\n//   }\n// }\n// class NumberBlock extends Block {}\n// class OperationBlock extends Block {}\n\n// class Calculator extends React.Component {\n//   constructor(props) {\n//     super(props);\n\n//     this.state = {\n//       displayEquation: \"0\",\n//       lastCharacter: \"0\",\n//     }\n//   }\n\n//   evaluateDisplayEquation(equation) {\n//     const config = { }\n//     const math = create(all, config);\n//     return math.evaluate(equation.toLowerCase());\n//   }\n\n//   handleNumberButtonClick(value) {\n//     this.setState({lastCharacter: value});\n//     const displayEquation = this.state.displayEquation;\n\n//     if(displayEquation === \"0\") {\n//       this.setState({displayEquation: `${value}`});\n//       return\n//     }\n//     this.setState({displayEquation: `${displayEquation}${value}`});\n//   }\n\n//   handleOperationButtonClick(value) {\n//     if(value == \"c\") {\n//       this.setState({displayEquation: \"0\"});\n//       return;\n//     }\n\n//     if(value == \"=\") {\n//       const solvedEquation = this.evaluateDisplayEquation(this.state.displayEquation);\n\n//       this.setState({displayEquation: solvedEquation.toString()});\n//       return;\n//     }\n\n//     const operationValues = [\"/\", \"*\",\n//                              \"-\", \"+\"];\n//     if(operationValues.includes(this.state.lastCharacter)) {return}\n\n//     this.setState({lastCharacter: value});\n\n//     const displayEquation = this.state.displayEquation\n//     this.setState({displayEquation: `${displayEquation}${value}`})\n//     return\n//   }\n\n//   renderNumberBlock(value) {\n//     return <NumberBlock \n//       value={value} \n//       onClick={() => {this.handleNumberButtonClick(value)}}\n//     />\n//   }\n\n//   renderOperationBlock(value) {\n//     return <OperationBlock\n//       value={value}\n//       onClick={() => {this.handleOperationButtonClick(value)}}\n//     />;\n//   }\n\n//   render() {\n//     const displayEquation = this.state.displayEquation;\n\n//     return (\n//       <div className='calculator'>\n//         {/* The numbers and operations being used */}\n//         <div className='number-screen'>\n//           <p className='text'>{displayEquation}</p>   \n//         </div>\n\n//         {/* All the buttons for the operations and numbers */}\n//         <div className=\"board-row\">                 \n//           {this.renderNumberBlock(7)}\n//           {this.renderNumberBlock(8)}\n//           {this.renderNumberBlock(9)}\n//           {this.renderOperationBlock(\"/\")}\n//         </div>\n//         <div className=\"board-row\">\n//           {this.renderNumberBlock(4)}\n//           {this.renderNumberBlock(5)}\n//           {this.renderNumberBlock(6)}\n//           {this.renderOperationBlock(\"*\")}\n//         </div>\n//         <div className=\"board-row\">\n//           {this.renderNumberBlock(1)}\n//           {this.renderNumberBlock(2)}\n//           {this.renderNumberBlock(3)}\n//           {this.renderOperationBlock(\"-\")}\n//         </div>\n//         <div className=\"board-row\">\n//           {this.renderNumberBlock(0)}\n//           {this.renderOperationBlock(\"c\")}\n//           {this.renderOperationBlock(\"=\")}\n//           {this.renderOperationBlock(\"+\")}\n//         </div>\n//       </div>\n//     );\n//   }\n// }\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render( /*#__PURE__*/_jsxDEV(App, {}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 140,\n  columnNumber: 13\n}, this));","map":{"version":3,"names":["React","ReactDOM","root","createRoot","document","getElementById","render"],"sources":["C:/Users/Adrian/Documents/Coding/react_calculator/src/index.js"],"sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\n\n// import { create, all } from 'mathjs'\n\n\n// class Block extends React.Component {\n//   constructor(props) {\n//     super(props);\n\n//     this.state = {\n//       value: this.props.value,\n//     };\n//   }\n\n//   render() {\n//     return (\n//       <button className=\"button\" \n//               onClick={() => {this.props.onClick()}}>\n//         <p className='text'>{this.state.value}</p>\n//       </button>\n//     )\n//   }\n// }\n// class NumberBlock extends Block {}\n// class OperationBlock extends Block {}\n\n\n// class Calculator extends React.Component {\n//   constructor(props) {\n//     super(props);\n\n//     this.state = {\n//       displayEquation: \"0\",\n//       lastCharacter: \"0\",\n//     }\n//   }\n\n//   evaluateDisplayEquation(equation) {\n//     const config = { }\n//     const math = create(all, config);\n//     return math.evaluate(equation.toLowerCase());\n//   }\n\n//   handleNumberButtonClick(value) {\n//     this.setState({lastCharacter: value});\n//     const displayEquation = this.state.displayEquation;\n\n//     if(displayEquation === \"0\") {\n//       this.setState({displayEquation: `${value}`});\n//       return\n//     }\n//     this.setState({displayEquation: `${displayEquation}${value}`});\n//   }\n\n//   handleOperationButtonClick(value) {\n//     if(value == \"c\") {\n//       this.setState({displayEquation: \"0\"});\n//       return;\n//     }\n\n//     if(value == \"=\") {\n//       const solvedEquation = this.evaluateDisplayEquation(this.state.displayEquation);\n\n//       this.setState({displayEquation: solvedEquation.toString()});\n//       return;\n//     }\n    \n//     const operationValues = [\"/\", \"*\",\n//                              \"-\", \"+\"];\n//     if(operationValues.includes(this.state.lastCharacter)) {return}\n\n//     this.setState({lastCharacter: value});\n\n//     const displayEquation = this.state.displayEquation\n//     this.setState({displayEquation: `${displayEquation}${value}`})\n//     return\n//   }\n\n//   renderNumberBlock(value) {\n//     return <NumberBlock \n//       value={value} \n//       onClick={() => {this.handleNumberButtonClick(value)}}\n//     />\n//   }\n\n//   renderOperationBlock(value) {\n//     return <OperationBlock\n//       value={value}\n//       onClick={() => {this.handleOperationButtonClick(value)}}\n//     />;\n//   }\n\n//   render() {\n//     const displayEquation = this.state.displayEquation;\n\n//     return (\n//       <div className='calculator'>\n//         {/* The numbers and operations being used */}\n//         <div className='number-screen'>\n//           <p className='text'>{displayEquation}</p>   \n//         </div>\n        \n//         {/* All the buttons for the operations and numbers */}\n//         <div className=\"board-row\">                 \n//           {this.renderNumberBlock(7)}\n//           {this.renderNumberBlock(8)}\n//           {this.renderNumberBlock(9)}\n//           {this.renderOperationBlock(\"/\")}\n//         </div>\n//         <div className=\"board-row\">\n//           {this.renderNumberBlock(4)}\n//           {this.renderNumberBlock(5)}\n//           {this.renderNumberBlock(6)}\n//           {this.renderOperationBlock(\"*\")}\n//         </div>\n//         <div className=\"board-row\">\n//           {this.renderNumberBlock(1)}\n//           {this.renderNumberBlock(2)}\n//           {this.renderNumberBlock(3)}\n//           {this.renderOperationBlock(\"-\")}\n//         </div>\n//         <div className=\"board-row\">\n//           {this.renderNumberBlock(0)}\n//           {this.renderOperationBlock(\"c\")}\n//           {this.renderOperationBlock(\"=\")}\n//           {this.renderOperationBlock(\"+\")}\n//         </div>\n//       </div>\n//     );\n//   }\n// }\n\n\n\n\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(<App/>);"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,QAAQ,MAAM,kBAAkB;AACvC,OAAO,aAAa;;AAEpB;;AAGA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAMA,MAAMC,IAAI,GAAGD,QAAQ,CAACE,UAAU,CAACC,QAAQ,CAACC,cAAc,CAAC,MAAM,CAAC,CAAC;AACjEH,IAAI,CAACI,MAAM,eAAC,QAAC,GAAG;EAAA;EAAA;EAAA;AAAA,QAAE,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}