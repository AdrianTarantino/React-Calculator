{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Adrian\\\\Documents\\\\Coding\\\\react-calculator\\\\src\\\\calculator-components\\\\CalculatorComponents.js\",\n  _s = $RefreshSig$();\nimport { useState } from 'react';\nimport stringMath from 'string-math'; // Library used for taking string of math formula and solving.\nimport './CalculatorComponents.css';\n\n/** \r\n * Component used to represent each button\r\n * on the calculator.\r\n */\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction CalculatorButton(_ref) {\n  let {\n    buttonText,\n    onClick\n  } = _ref;\n  return /*#__PURE__*/_jsxDEV(\"button\", {\n    className: 'CalculatorButton',\n    onClick: onClick,\n    children: buttonText\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 11,\n    columnNumber: 9\n  }, this);\n}\n\n/**\r\n * Component used to represent each row of buttons\r\n * on the calculator.\r\n */\n_c = CalculatorButton;\nfunction CalculatorButtonRow(_ref2) {\n  let {\n    buttonTexts,\n    onClicks\n  } = _ref2;\n  let cells = [];\n  for (let i = 0; i < buttonTexts.length; i++) {\n    cells.push( /*#__PURE__*/_jsxDEV(CalculatorButton, {\n      buttonText: buttonTexts[i],\n      onClick: onClicks[i]\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 20\n    }, this));\n  }\n  return /*#__PURE__*/_jsxDEV(\"tr\", {\n    children: cells\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 27,\n    columnNumber: 9\n  }, this);\n}\n\n/**\r\n * Component used to represent the screen\r\n * of the calculator.\r\n */\n_c2 = CalculatorButtonRow;\nfunction CalculatorScreen(_ref3) {\n  let {\n    displayText\n  } = _ref3;\n  return /*#__PURE__*/_jsxDEV(\"td\", {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: 'CalculatorScreen',\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        className: 'CalculatorScreenText',\n        children: displayText\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 39,\n    columnNumber: 9\n  }, this);\n}\n\n/**\r\n * Component used to represent the base of the calculator.\r\n */\n_c3 = CalculatorScreen;\nfunction CalculatorBase() {\n  _s();\n  const [screenText, setScreenText] = useState(0);\n  const [addSpecialChar, setAddSpecialChar] = useState(false);\n  const specialChars = [0, '+', '-', '*', '/'];\n  const addCharToScreen = char => {\n    let isSpecialChar = false;\n    for (let i = 0; i < specialChars.length; i++) {\n      if (char === specialChars[i]) {\n        isSpecialChar = true;\n        break;\n      }\n    }\n    if (!addSpecialChar && isSpecialChar) {\n      return;\n    }\n    setScreenText([screenText, char].join(''));\n    if (isSpecialChar) {\n      setAddSpecialChar(false);\n      return;\n    }\n    setAddSpecialChar(true);\n  };\n  const clearScreen = () => {\n    setScreenText('0');\n  };\n  const solveEqueation = () => {\n    try {\n      const solvedEquation = stringMath(screenText);\n      setScreenText(solvedEquation);\n    } catch (error) {\n      clearScreen();\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: 'CalculatorBase',\n    children: /*#__PURE__*/_jsxDEV(\"table\", {\n      children: [/*#__PURE__*/_jsxDEV(\"tr\", {\n        children: /*#__PURE__*/_jsxDEV(CalculatorScreen, {\n          displayText: screenText\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(CalculatorButtonRow, {\n        buttonTexts: [7, 8, 9, '/'],\n        onClicks: [() => {\n          addCharToScreen(7);\n        }, () => {\n          addCharToScreen(8);\n        }, () => {\n          addCharToScreen(9);\n        }, () => {\n          addCharToScreen('/');\n        }]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(CalculatorButtonRow, {\n        buttonTexts: [4, 5, 6, 'x'],\n        onClicks: [() => {\n          addCharToScreen(4);\n        }, () => {\n          addCharToScreen(5);\n        }, () => {\n          addCharToScreen(6);\n        }, () => {\n          addCharToScreen('*');\n        }]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(CalculatorButtonRow, {\n        buttonTexts: [1, 2, 3, '-'],\n        onClicks: [() => {\n          addCharToScreen(1);\n        }, () => {\n          addCharToScreen(2);\n        }, () => {\n          addCharToScreen(3);\n        }, () => {\n          addCharToScreen('-');\n        }]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(CalculatorButtonRow, {\n        buttonTexts: ['C', 0, '=', '+'],\n        onClicks: [clearScreen, () => {\n          addCharToScreen(0);\n        }, solveEqueation, () => {\n          addCharToScreen('+');\n        }]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 88,\n    columnNumber: 9\n  }, this);\n}\n_s(CalculatorBase, \"YuDzgr3JFACXwnummox+BmhPQ1k=\");\n_c4 = CalculatorBase;\nexport default CalculatorBase;\nvar _c, _c2, _c3, _c4;\n$RefreshReg$(_c, \"CalculatorButton\");\n$RefreshReg$(_c2, \"CalculatorButtonRow\");\n$RefreshReg$(_c3, \"CalculatorScreen\");\n$RefreshReg$(_c4, \"CalculatorBase\");","map":{"version":3,"names":["useState","stringMath","CalculatorButton","buttonText","onClick","CalculatorButtonRow","buttonTexts","onClicks","cells","i","length","push","CalculatorScreen","displayText","CalculatorBase","screenText","setScreenText","addSpecialChar","setAddSpecialChar","specialChars","addCharToScreen","char","isSpecialChar","join","clearScreen","solveEqueation","solvedEquation","error"],"sources":["C:/Users/Adrian/Documents/Coding/react-calculator/src/calculator-components/CalculatorComponents.js"],"sourcesContent":["import { useState } from 'react';\r\nimport stringMath from 'string-math';   // Library used for taking string of math formula and solving.\r\nimport './CalculatorComponents.css';\r\n\r\n/** \r\n * Component used to represent each button\r\n * on the calculator.\r\n */\r\nfunction CalculatorButton({ buttonText, onClick }) {\r\n    return(\r\n        <button className={ 'CalculatorButton' } onClick={ onClick }>{ buttonText }</button>\r\n    );\r\n} \r\n\r\n/**\r\n * Component used to represent each row of buttons\r\n * on the calculator.\r\n */\r\nfunction CalculatorButtonRow({ buttonTexts, onClicks}) {\r\n    let cells = [];\r\n\r\n    for(let i = 0; i < buttonTexts.length; i ++) {\r\n        cells.push(<CalculatorButton buttonText={ buttonTexts[i] } onClick={ onClicks[i] }/>);\r\n    }\r\n\r\n    return(\r\n        <tr>\r\n            { cells }\r\n        </tr>    \r\n    );\r\n}\r\n\r\n/**\r\n * Component used to represent the screen\r\n * of the calculator.\r\n */\r\nfunction CalculatorScreen({ displayText }) {\r\n    return(\r\n        <td><div className={ 'CalculatorScreen' }>\r\n            <p className={ 'CalculatorScreenText' }>{ displayText }</p>\r\n        </div></td>\r\n    );\r\n}\r\n\r\n/**\r\n * Component used to represent the base of the calculator.\r\n */\r\nfunction CalculatorBase() {\r\n    const [screenText, setScreenText] = useState(0);\r\n    const [addSpecialChar, setAddSpecialChar] = useState(false);\r\n    const specialChars = [0, '+', '-', '*', '/'];\r\n\r\n    const addCharToScreen = (char) => {\r\n        let isSpecialChar = false;\r\n        for(let i = 0; i < specialChars.length; i ++) {\r\n            if(char === specialChars[i]) { \r\n                isSpecialChar = true; \r\n                break;\r\n            }\r\n        }\r\n\r\n        if(!addSpecialChar && isSpecialChar) { return; }\r\n        setScreenText([screenText, char].join(''));\r\n\r\n        if(isSpecialChar) { \r\n            setAddSpecialChar(false);\r\n            return;\r\n        }\r\n        setAddSpecialChar(true);\r\n    }\r\n\r\n    const clearScreen = () => {\r\n        setScreenText('0');\r\n    };\r\n\r\n    const solveEqueation = () => {\r\n        try {\r\n            const solvedEquation = stringMath(screenText);\r\n            setScreenText(solvedEquation);\r\n        }\r\n\r\n        catch(error) {\r\n            clearScreen();\r\n        }\r\n    };\r\n\r\n    return(\r\n        <div className={ 'CalculatorBase' }>\r\n            <table>\r\n                <tr>\r\n                    <CalculatorScreen displayText={ screenText }/>\r\n                </tr>\r\n                <CalculatorButtonRow buttonTexts={ [7, 8, 9, '/'] } onClicks={ [() => { addCharToScreen(7); }, () => { addCharToScreen(8); }, () => { addCharToScreen(9); }, () => { addCharToScreen('/'); }] }/>\r\n                <CalculatorButtonRow buttonTexts={ [4, 5, 6, 'x'] } onClicks={ [() => { addCharToScreen(4); }, () => { addCharToScreen(5); }, () => { addCharToScreen(6); }, () => { addCharToScreen('*'); }] }/>\r\n                <CalculatorButtonRow buttonTexts={ [1, 2, 3, '-'] } onClicks={ [() => { addCharToScreen(1); }, () => { addCharToScreen(2); }, () => { addCharToScreen(3); }, () => { addCharToScreen('-'); }] }/>\r\n                <CalculatorButtonRow buttonTexts={ ['C', 0, '=', '+'] } onClicks={ [clearScreen, () => { addCharToScreen(0); }, solveEqueation, () => { addCharToScreen('+'); }] }/>\r\n            </table>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default CalculatorBase;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}